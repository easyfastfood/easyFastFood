// Code generated by MockGen. DO NOT EDIT.
// Source: restaurant.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "easyfood/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRestaurantService is a mock of RestaurantService interface.
type MockRestaurantService struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantServiceMockRecorder
}

// MockRestaurantServiceMockRecorder is the mock recorder for MockRestaurantService.
type MockRestaurantServiceMockRecorder struct {
	mock *MockRestaurantService
}

// NewMockRestaurantService creates a new mock instance.
func NewMockRestaurantService(ctrl *gomock.Controller) *MockRestaurantService {
	mock := &MockRestaurantService{ctrl: ctrl}
	mock.recorder = &MockRestaurantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantService) EXPECT() *MockRestaurantServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRestaurantService) Create(ctx context.Context, restaurant *entity.Restaurant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, restaurant)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRestaurantServiceMockRecorder) Create(ctx, restaurant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRestaurantService)(nil).Create), ctx, restaurant)
}

// Get mocks base method.
func (m *MockRestaurantService) Get(ctx context.Context, id *int) ([]*entity.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].([]*entity.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRestaurantServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestaurantService)(nil).Get), ctx, id)
}

// GetByCategory mocks base method.
func (m *MockRestaurantService) GetByCategory(ctx context.Context, categoryID int) ([]*entity.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]*entity.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockRestaurantServiceMockRecorder) GetByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockRestaurantService)(nil).GetByCategory), ctx, categoryID)
}

// GetByDish mocks base method.
func (m *MockRestaurantService) GetByDish(ctx context.Context, dishID int) (*entity.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDish", ctx, dishID)
	ret0, _ := ret[0].(*entity.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDish indicates an expected call of GetByDish.
func (mr *MockRestaurantServiceMockRecorder) GetByDish(ctx, dishID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDish", reflect.TypeOf((*MockRestaurantService)(nil).GetByDish), ctx, dishID)
}

// Update mocks base method.
func (m *MockRestaurantService) Update(ctx context.Context, restaurant *entity.Restaurant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, restaurant)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRestaurantServiceMockRecorder) Update(ctx, restaurant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRestaurantService)(nil).Update), ctx, restaurant)
}
