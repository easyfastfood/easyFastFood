// Code generated by MockGen. DO NOT EDIT.
// Source: dish.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "easyfood/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDishService is a mock of DishService interface.
type MockDishService struct {
	ctrl     *gomock.Controller
	recorder *MockDishServiceMockRecorder
}

// MockDishServiceMockRecorder is the mock recorder for MockDishService.
type MockDishServiceMockRecorder struct {
	mock *MockDishService
}

// NewMockDishService creates a new mock instance.
func NewMockDishService(ctrl *gomock.Controller) *MockDishService {
	mock := &MockDishService{ctrl: ctrl}
	mock.recorder = &MockDishServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDishService) EXPECT() *MockDishServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDishService) Create(ctx context.Context, dish *entity.Dish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDishServiceMockRecorder) Create(ctx, dish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDishService)(nil).Create), ctx, dish)
}

// Get mocks base method.
func (m *MockDishService) Get(ctx context.Context, id *int) ([]*entity.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].([]*entity.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDishServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDishService)(nil).Get), ctx, id)
}

// GetByCategory mocks base method.
func (m *MockDishService) GetByCategory(ctx context.Context, categoryID int) ([]*entity.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]*entity.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockDishServiceMockRecorder) GetByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockDishService)(nil).GetByCategory), ctx, categoryID)
}

// GetByRestaurant mocks base method.
func (m *MockDishService) GetByRestaurant(ctx context.Context, restaurantID int) ([]*entity.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRestaurant", ctx, restaurantID)
	ret0, _ := ret[0].([]*entity.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRestaurant indicates an expected call of GetByRestaurant.
func (mr *MockDishServiceMockRecorder) GetByRestaurant(ctx, restaurantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRestaurant", reflect.TypeOf((*MockDishService)(nil).GetByRestaurant), ctx, restaurantID)
}

// Update mocks base method.
func (m *MockDishService) Update(ctx context.Context, dish *entity.Dish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDishServiceMockRecorder) Update(ctx, dish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDishService)(nil).Update), ctx, dish)
}
